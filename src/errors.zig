pub fn errnoToString(code: c_int) []const u8 {
    switch (code) {
        1 => return "ENOENT(1)",
        2 => return "ESRCH(2)",
        3 => return "EINTR(3)",
        4 => return "EIO(4)",
        5 => return "ENXIO(5)",
        6 => return "E2BIG(6)",
        7 => return "ENOEXEC(7)",
        8 => return "EBADF(8)",
        9 => return "ECHILD(9)",
        10 => return "EAGAIN(10)",
        11 => return "ENOMEM(11)",
        12 => return "EACCES(12)",
        13 => return "EFAULT(13)",
        14 => return "ENOTBLK(14)",
        15 => return "EBUSY(15)",
        16 => return "EEXIST(16)",
        17 => return "EXDEV(17)",
        18 => return "ENODEV(18)",
        19 => return "ENOTDIR(19)",
        20 => return "EISDIR(20)",
        21 => return "EINVAL(21)",
        22 => return "ENFILE(22)",
        23 => return "EMFILE(23)",
        24 => return "ENOTTY(24)",
        25 => return "ETXTBSY(25)",
        26 => return "EFBIG(26)",
        27 => return "ENOSPC(27)",
        28 => return "ESPIPE(28)",
        29 => return "EROFS(29)",
        30 => return "EMLINK(30)",
        31 => return "EPIPE(31)",
        32 => return "EDOM(32)",
        33 => return "ERANGE(33)",
        34 => return "EDEADLK(34)",
        35 => return "ENAMETOOLONG(35)",
        36 => return "ENOLCK(36)",
        37 => return "ENOSYS(37)",
        38 => return "ENOTEMPTY(38)",
        39 => return "ELOOP(39)",
        40 => return "ENOMSG(40)",
        42 => return "EIDRM(42)",
        43 => return "ECHRNG(43)",
        44 => return "EL2NSYNC(44)",
        45 => return "EL3HLT(45)",
        46 => return "EL3RST(46)",
        47 => return "ELNRNG(47)",
        48 => return "EUNATCH(48)",
        49 => return "ENOCSI(49)",
        50 => return "EL2HLT(50)",
        51 => return "EBADE(51)",
        52 => return "EBADR(52)",
        53 => return "EXFULL(53)",
        54 => return "ENOANO(54)",
        55 => return "EBADRQC(55)",
        56 => return "EBADSLT(56)",
        57 => return "EBFONT(57)",
        59 => return "ENOSTR(59)",
        60 => return "ENODATA(60)",
        61 => return "ETIME(61)",
        62 => return "ENOSR(62)",
        63 => return "ENONET(63)",
        64 => return "ENOPKG(64)",
        65 => return "EREMOTE(65)",
        66 => return "ENOLINK(66)",
        67 => return "EADV(67)",
        68 => return "ESRMNT(68)",
        69 => return "ECOMM(69)",
        70 => return "EPROTO(70)",
        71 => return "EMULTIHOP(71)",
        72 => return "EDOTDOT(72)",
        73 => return "EBADMSG(73)",
        74 => return "EOVERFLOW(74)",
        75 => return "ENOTUNIQ(75)",
        76 => return "EBADFD(76)",
        77 => return "EREMCHG(77)",
        78 => return "ELIBACC(78)",
        79 => return "ELIBBAD(79)",
        80 => return "ELIBSCN(80)",
        81 => return "ELIBMAX(81)",
        82 => return "ELIBEXEC(82)",
        83 => return "EILSEQ(83)",
        84 => return "ERESTART(84)",
        85 => return "ESTRPIPE(85)",
        86 => return "EUSERS(86)",
        87 => return "ENOTSOCK(87)",
        88 => return "EDESTADDRREQ(88)",
        89 => return "EMSGSIZE(89)",
        90 => return "EPROTOTYPE(90)",
        91 => return "ENOPROTOOPT(91)",
        92 => return "EPROTONOSUPPORT(92)",
        93 => return "ESOCKTNOSUPPORT(93)",
        94 => return "EOPNOTSUPP(94)",
        95 => return "EPFNOSUPPORT(95)",
        96 => return "EAFNOSUPPORT(96)",
        97 => return "EADDRINUSE(97)",
        98 => return "EADDRNOTAVAIL(98)",
        99 => return "ENETDOWN(99)",
        100 => return "ENETUNREACH(100)",
        101 => return "ENETRESET(101)",
        102 => return "ECONNABORTED(102)",
        103 => return "ECONNRESET(103)",
        104 => return "ENOBUFS(104)",
        105 => return "EISCONN(105)",
        106 => return "ENOTCONN(106)",
        107 => return "ESHUTDOWN(107)",
        108 => return "ETOOMANYREFS(108)",
        109 => return "ETIMEDOUT(109)",
        110 => return "ECONNREFUSED(110)",
        111 => return "EHOSTDOWN(111)",
        112 => return "EHOSTUNREACH(112)",
        113 => return "EALREADY(113)",
        114 => return "EINPROGRESS(114)",
        115 => return "ESTALE(115)",
        116 => return "EUCLEAN(116)",
        117 => return "ENOTNAM(117)",
        118 => return "ENAVAIL(118)",
        119 => return "EISNAM(119)",
        120 => return "EREMOTEIO(120)",
        121 => return "EDQUOT(121)",
        122 => return "ENOMEDIUM(122)",
        123 => return "EMEDIUMTYPE(123)",
        124 => return "ECANCELED(124)",
        125 => return "ENOKEY(125)",
        126 => return "EKEYEXPIRED(126)",
        127 => return "EKEYREVOKED(127)",
        128 => return "EKEYREJECTED(128)",
        129 => return "EOWNERDEAD(129)",
        130 => return "ENOTRECOVERABLE(130)",
        131 => return "ERFKILL(131)",
        132 => return "EHWPOISON(132)",
        133 => return "EPERM(133)",
        else => return "UNKNOWN(else)",
    }
}

pub fn signalToString(sig: c_int) []const u8 {
    switch (sig) {
        1 => return "SIGHUP(1)",
        2 => return "SIGINT(2)",
        3 => return "SIGQUIT(3)",
        4 => return "SIGILL(4)",
        5 => return "SIGTRAP(5)",
        6 => return "SIGABRT(6)",
        7 => return "SIGBUS(7)",
        8 => return "SIGFPE(8)",
        9 => return "SIGKILL(9)",
        10 => return "SIGUSR1(10)",
        11 => return "SIGSEGV(11)",
        12 => return "SIGUSR2(12)",
        13 => return "SIGPIPE(13)",
        14 => return "SIGALRM(14)",
        15 => return "SIGTERM(15)",
        16 => return "SIGSTKFLT(16)",
        17 => return "SIGCHLD(17)",
        18 => return "SIGCONT(18)",
        19 => return "SIGSTOP(19)",
        20 => return "SIGTSTP(20)",
        21 => return "SIGTTIN(21)",
        22 => return "SIGTTOU(22)",
        23 => return "SIGURG(23)",
        24 => return "SIGXCPU(24)",
        25 => return "SIGXFSZ(25)",
        26 => return "SIGVTALRM(26)",
        27 => return "SIGPROF(27)",
        28 => return "SIGWINCH(28)",
        29 => return "SIGPOLL(29)",
        30 => return "SIGPWR(30)",
        31 => return "SIGSYS(31)",
        else => return "UNKNOWN",
    }
}
